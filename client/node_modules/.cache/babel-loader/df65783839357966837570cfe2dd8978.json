{"ast":null,"code":"const async = require('async');\n\nconst pool = require('../config/dbpool.js');\n\nconsole.log('pool.js');\nmodule.exports = {\n  queryParamCnt_None: async (...args) => {\n    const query = args[0];\n    let result;\n\n    try {\n      var connection = await pool.getConnection();\n      result = await connection.query(query);\n    } catch (err) {\n      console.log(\"mysql error! err log =>\" + err);\n    } finally {\n      pool.releaseConnection(connection);\n      return result;\n    }\n  },\n  queryParamCnt_Arr: async (...args) => {\n    const query = args[0];\n    const data = args[1];\n    let result;\n\n    try {\n      var connection = await pool.getConnection();\n      result = await connection.query(query, data);\n    } catch (err) {\n      console.log(\"mysql error! err log =>\" + err);\n    } finally {\n      pool.releaseConnection(connection);\n      return result;\n    }\n  },\n  Transaction: async (...args) => {\n    let result = \"Success\";\n\n    try {\n      var connection = await pool.getConnection();\n      await connection.beginTransaction();\n      await args[0](connection, ...args);\n      await connection.commit();\n    } catch (err) {\n      await connection.rollback();\n      console.log(\"mysql error! err log =>\" + err);\n      result = undefined;\n    } finally {\n      pool.releaseConnection(connection);\n      return result;\n    }\n  }\n};\n/* Transaction 사용 예시\r\n\r\nconst db = require('../module/pool.js');\r\n\r\nawait db.Transaction( async (connection) => {\r\n  await connection.query(query1, [data]);\r\n  await connection.query(query2, [data]);\r\n})\r\n\r\n\r\nlet Transaction = await db.Transaction( async (connection) => {\r\n  var result_addvote = await connection.query(select_addvote,[vote, id]);\r\n  if(!result_addvote){\r\n    return next(\"500\");\r\n  }\r\n\r\n  let result_subcoin = await connection.query(select_subcoin,[vote, id]);\r\n  if(!result_subcoin){\r\n    return next(\"500\");\r\n  }\r\n})\r\n\r\nif(!Transaction){\r\n  return next(\"500\");\r\n}\r\n\r\n*/","map":{"version":3,"sources":["C:\\Users\\gksdb\\Desktop\\2019-2-OSSP1-Buzz-5\\client\\src\\Server\\module\\pool.js"],"names":["async","require","pool","console","log","module","exports","queryParamCnt_None","args","query","result","connection","getConnection","err","releaseConnection","queryParamCnt_Arr","data","Transaction","beginTransaction","commit","rollback","undefined"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,qBAAD,CAApB;;AACAE,OAAO,CAACC,GAAR,CAAY,SAAZ;AAEAC,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,kBAAkB,EAAG,OAAO,GAAGC,IAAV,KAAmB;AACtC,UAAMC,KAAK,GAAGD,IAAI,CAAC,CAAD,CAAlB;AACA,QAAIE,MAAJ;;AACA,QAAI;AACF,UAAIC,UAAU,GAAG,MAAMT,IAAI,CAACU,aAAL,EAAvB;AACAF,MAAAA,MAAM,GAAG,MAAMC,UAAU,CAACF,KAAX,CAAiBA,KAAjB,CAAf;AACD,KAHD,CAIA,OAAMI,GAAN,EAAW;AACTV,MAAAA,OAAO,CAACC,GAAR,CAAY,4BAA4BS,GAAxC;AACD,KAND,SAOQ;AACNX,MAAAA,IAAI,CAACY,iBAAL,CAAuBH,UAAvB;AACA,aAAOD,MAAP;AACD;AACF,GAfc;AAgBfK,EAAAA,iBAAiB,EAAG,OAAO,GAAGP,IAAV,KAAmB;AACrC,UAAMC,KAAK,GAAGD,IAAI,CAAC,CAAD,CAAlB;AACA,UAAMQ,IAAI,GAAGR,IAAI,CAAC,CAAD,CAAjB;AAEA,QAAIE,MAAJ;;AACA,QAAI;AACF,UAAIC,UAAU,GAAG,MAAMT,IAAI,CAACU,aAAL,EAAvB;AACAF,MAAAA,MAAM,GAAG,MAAMC,UAAU,CAACF,KAAX,CAAiBA,KAAjB,EAAwBO,IAAxB,CAAf;AACD,KAHD,CAIA,OAAMH,GAAN,EAAW;AACTV,MAAAA,OAAO,CAACC,GAAR,CAAY,4BAA4BS,GAAxC;AACD,KAND,SAOQ;AACNX,MAAAA,IAAI,CAACY,iBAAL,CAAuBH,UAAvB;AACA,aAAOD,MAAP;AACD;AACF,GAhCc;AAiCfO,EAAAA,WAAW,EAAG,OAAO,GAAGT,IAAV,KAAmB;AAC/B,QAAIE,MAAM,GAAG,SAAb;;AAEA,QAAG;AACD,UAAIC,UAAU,GAAG,MAAMT,IAAI,CAACU,aAAL,EAAvB;AACA,YAAMD,UAAU,CAACO,gBAAX,EAAN;AAEA,YAAMV,IAAI,CAAC,CAAD,CAAJ,CAAQG,UAAR,EAAoB,GAAGH,IAAvB,CAAN;AACA,YAAMG,UAAU,CAACQ,MAAX,EAAN;AACD,KAND,CAOA,OAAMN,GAAN,EAAU;AACR,YAAMF,UAAU,CAACS,QAAX,EAAN;AACAjB,MAAAA,OAAO,CAACC,GAAR,CAAY,4BAA4BS,GAAxC;AACAH,MAAAA,MAAM,GAAGW,SAAT;AACD,KAXD,SAYQ;AACNnB,MAAAA,IAAI,CAACY,iBAAL,CAAuBH,UAAvB;AACA,aAAOD,MAAP;AACD;AACF;AApDc,CAAjB;AAwDA","sourcesContent":["const async = require('async');\r\nconst pool = require('../config/dbpool.js');\r\nconsole.log('pool.js');\r\n\r\nmodule.exports = {\r\n  queryParamCnt_None : async (...args) => {\r\n    const query = args[0];\r\n    let result;\r\n    try {\r\n      var connection = await pool.getConnection();\r\n      result = await connection.query(query);\r\n    }\r\n    catch(err) {\r\n      console.log(\"mysql error! err log =>\" + err);\r\n    }\r\n    finally {\r\n      pool.releaseConnection(connection);\r\n      return result;\r\n    }\r\n  },\r\n  queryParamCnt_Arr : async (...args) => {\r\n    const query = args[0];\r\n    const data = args[1];\r\n\r\n    let result;\r\n    try {\r\n      var connection = await pool.getConnection();\r\n      result = await connection.query(query, data);\r\n    }\r\n    catch(err) {\r\n      console.log(\"mysql error! err log =>\" + err);\r\n    }\r\n    finally {\r\n      pool.releaseConnection(connection);\r\n      return result;\r\n    }\r\n  },\r\n  Transaction : async (...args) => {\r\n    let result = \"Success\";\r\n\r\n    try{\r\n      var connection = await pool.getConnection();\r\n      await connection.beginTransaction();\r\n\r\n      await args[0](connection, ...args);\r\n      await connection.commit();\r\n    }\r\n    catch(err){\r\n      await connection.rollback();\r\n      console.log(\"mysql error! err log =>\" + err);\r\n      result = undefined;\r\n    }\r\n    finally {\r\n      pool.releaseConnection(connection);\r\n      return result;\r\n    }\r\n  }\r\n};\r\n\r\n\r\n/* Transaction 사용 예시\r\n\r\nconst db = require('../module/pool.js');\r\n\r\nawait db.Transaction( async (connection) => {\r\n  await connection.query(query1, [data]);\r\n  await connection.query(query2, [data]);\r\n})\r\n\r\n\r\nlet Transaction = await db.Transaction( async (connection) => {\r\n  var result_addvote = await connection.query(select_addvote,[vote, id]);\r\n  if(!result_addvote){\r\n    return next(\"500\");\r\n  }\r\n\r\n  let result_subcoin = await connection.query(select_subcoin,[vote, id]);\r\n  if(!result_subcoin){\r\n    return next(\"500\");\r\n  }\r\n})\r\n\r\nif(!Transaction){\r\n  return next(\"500\");\r\n}\r\n\r\n*/\r\n"]},"metadata":{},"sourceType":"module"}