{"ast":null,"code":"'use strict';\n\nconst Promise = require('bluebird');\n\nconst mysql = require('mysql');\n\nconst PoolConnection = require('./poolConnection.js');\n\nconst promiseCallback = require('./helper').promiseCallback;\n\nclass pool {\n  constructor(config = {}) {\n    let mysqlValue = mysql;\n    let mysqlWrapperCallbackPromise;\n\n    if (config.mysqlWrapper) {\n      let callback;\n      mysqlWrapperCallbackPromise = new Promise((resolve, reject) => {\n        callback = (err, mysql) => {\n          if (err) {\n            return reject(err);\n          }\n\n          return resolve(mysql);\n        };\n      });\n      mysqlValue = config.mysqlWrapper(mysql, callback);\n      delete config.mysqlWrapper;\n    }\n\n    if (config.returnArgumentsArray) {\n      this.returnArgumentsArray = config.returnArgumentsArray;\n      config.returnArgumentsArray = undefined;\n    }\n\n    return Promise.resolve(mysqlValue || mysqlWrapperCallbackPromise).then(mysql => {\n      this.pool = mysql.createPool(config);\n      return Promise.resolve(this);\n    });\n  }\n\n  getConnection() {\n    return promiseCallback.apply(this.pool, ['getConnection', arguments, this.returnArgumentsArray]).then(_connection => {\n      const config = {\n        returnArgumentsArray: this.returnArgumentsArray,\n        reconnect: false\n      };\n      return new PoolConnection(config, _connection);\n    });\n  }\n\n  releaseConnection(connection) {\n    //Use the underlying connection from the mysql-module here:\n    return this.pool.releaseConnection(connection.connection);\n  }\n\n  query() {\n    return promiseCallback.apply(this.pool, ['query', arguments, this.returnArgumentsArray]);\n  }\n\n  end() {\n    return promiseCallback.apply(this.pool, ['end', arguments, this.returnArgumentsArray]);\n  }\n\n  escape(value) {\n    return this.pool.escape(value);\n  }\n\n  escapeId(value) {\n    return this.pool.escapeId(value);\n  }\n\n  on(event, fn) {\n    this.pool.on(event, fn);\n  }\n\n}\n\nmodule.exports = pool;","map":null,"metadata":{},"sourceType":"script"}