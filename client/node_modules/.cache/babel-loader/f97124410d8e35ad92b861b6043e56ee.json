{"ast":null,"code":"const pool = require('../config/dbPool.js');\n\nmodule.exports = {\n  // 두 개의 메소드 module화\n  queryParam_None: async (...args) => {\n    // (...args) expression은 arrow function 사\n    const query = args[0];\n    let result;\n\n    try {\n      var connection = await pool.getConnection(); // connection을 pool에서 하나 가져온다.\n\n      result = (await connection.query(query)) || null; // query문의 결과 || null 값이 result에 들어간다.\n    } catch (err) {\n      next(err);\n    } finally {\n      //pool.releaseConnection(connection);\t\t\t\t\t\t\t\t// waterfall 에서는 connection.release()를 사용했지만, 이 경우 pool.releaseConnection(connection) 을 해준다.\n      console.log(connection);\n      return result;\n    }\n  },\n  queryParam_Arr: async (...args) => {\n    const query = args[0];\n    const value = args[1]; // array\n\n    let result;\n\n    try {\n      var connection = await pool.getConnection(); // connection을 pool에서 하나 가져온다.\n\n      result = (await connection.query(query, value)) || null; // 두 번째 parameter에 배열 => query문에 들어갈 runtime 시 결정될 value\n    } catch (err) {\n      next(err); //print(\"aaaaaaaaa\");\n    } finally {\n      pool.releaseConnection(connection); // waterfall 에서는 connection.release()를 사용했지만, 이 경우 pool.releaseConnection(connection) 을 해준다.\n\n      return result;\n    }\n  }\n};","map":{"version":3,"sources":["/Users/seojin-won/wisdom-x-wisdom/client/src/Server/module/pool.js"],"names":["pool","require","module","exports","queryParam_None","args","query","result","connection","getConnection","err","next","console","log","queryParam_Arr","value","releaseConnection"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,qBAAD,CAApB;;AAEAC,MAAM,CAACC,OAAP,GAAiB;AAAQ;AACxBC,EAAAA,eAAe,EAAG,OAAO,GAAGC,IAAV,KAAmB;AAAS;AAC7C,UAAMC,KAAK,GAAGD,IAAI,CAAC,CAAD,CAAlB;AACA,QAAIE,MAAJ;;AAEA,QAAI;AACH,UAAIC,UAAU,GAAG,MAAMR,IAAI,CAACS,aAAL,EAAvB,CADG,CAC4C;;AAC/CF,MAAAA,MAAM,GAAG,OAAMC,UAAU,CAACF,KAAX,CAAiBA,KAAjB,CAAN,KAAiC,IAA1C,CAFG,CAE8C;AACjD,KAHD,CAGE,OAAMI,GAAN,EAAW;AACZC,MAAAA,IAAI,CAACD,GAAD,CAAJ;AACA,KALD,SAKU;AACT;AACHE,MAAAA,OAAO,CAACC,GAAR,CAAYL,UAAZ;AACG,aAAOD,MAAP;AACA;AAED,GAhBe;AAiBhBO,EAAAA,cAAc,EAAG,OAAO,GAAGT,IAAV,KAAmB;AACnC,UAAMC,KAAK,GAAGD,IAAI,CAAC,CAAD,CAAlB;AACA,UAAMU,KAAK,GAAGV,IAAI,CAAC,CAAD,CAAlB,CAFmC,CAEZ;;AACvB,QAAIE,MAAJ;;AAEA,QAAI;AACH,UAAIC,UAAU,GAAG,MAAMR,IAAI,CAACS,aAAL,EAAvB,CADG,CAC4C;;AAC/CF,MAAAA,MAAM,GAAG,OAAMC,UAAU,CAACF,KAAX,CAAiBA,KAAjB,EAAwBS,KAAxB,CAAN,KAAwC,IAAjD,CAFG,CAEoD;AACvD,KAHD,CAGE,OAAML,GAAN,EAAW;AACZC,MAAAA,IAAI,CAACD,GAAD,CAAJ,CADY,CAEZ;AACA,KAND,SAMU;AACTV,MAAAA,IAAI,CAACgB,iBAAL,CAAuBR,UAAvB,EADS,CACkC;;AAC3C,aAAOD,MAAP;AACA;AACD;AAhCe,CAAjB","sourcesContent":["const pool = require('../config/dbPool.js');\n\nmodule.exports = {\t\t\t\t\t\t\t// 두 개의 메소드 module화\n\tqueryParam_None : async (...args) => {\t\t\t\t\t\t\t\t// (...args) expression은 arrow function 사\n\t\tconst query = args[0];\n\t\tlet result;\n\n\t\ttry {\n\t\t\tvar connection = await pool.getConnection();\t\t\t// connection을 pool에서 하나 가져온다.\n\t\t\tresult = await connection.query(query) || null;\t\t// query문의 결과 || null 값이 result에 들어간다.\n\t\t} catch(err) {\n\t\t\tnext(err);\n\t\t} finally {\n\t\t\t//pool.releaseConnection(connection);\t\t\t\t\t\t\t\t// waterfall 에서는 connection.release()를 사용했지만, 이 경우 pool.releaseConnection(connection) 을 해준다.\nconsole.log(connection);\n\t\t\treturn result;\n\t\t}\n\n\t},\n\tqueryParam_Arr : async (...args) => {\n\t\tconst query = args[0];\n\t\tconst value = args[1];\t// array\n\t\tlet result;\n\n\t\ttry {\n\t\t\tvar connection = await pool.getConnection();\t\t\t// connection을 pool에서 하나 가져온다.\n\t\t\tresult = await connection.query(query, value) || null;\t// 두 번째 parameter에 배열 => query문에 들어갈 runtime 시 결정될 value\n\t\t} catch(err) {\n\t\t\tnext(err);\n\t\t\t//print(\"aaaaaaaaa\");\n\t\t} finally {\n\t\t\tpool.releaseConnection(connection);\t\t\t\t\t\t\t\t// waterfall 에서는 connection.release()를 사용했지만, 이 경우 pool.releaseConnection(connection) 을 해준다.\n\t\t\treturn result;\n\t\t}\n\t}\n};\n"]},"metadata":{},"sourceType":"module"}