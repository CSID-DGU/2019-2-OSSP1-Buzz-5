{"ast":null,"code":"import _classCallCheck from\"/Users/seojin-won/wisdom-x-wisdom/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/seojin-won/wisdom-x-wisdom/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/Users/seojin-won/wisdom-x-wisdom/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/seojin-won/wisdom-x-wisdom/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _assertThisInitialized from\"/Users/seojin-won/wisdom-x-wisdom/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";import _inherits from\"/Users/seojin-won/wisdom-x-wisdom/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';var MediaBridge=/*#__PURE__*/function(_Component){_inherits(MediaBridge,_Component);function MediaBridge(props){var _this;_classCallCheck(this,MediaBridge);_this=_possibleConstructorReturn(this,_getPrototypeOf(MediaBridge).call(this,props));_this.state={bridge:'',user:''};_this.onRemoteHangup=_this.onRemoteHangup.bind(_assertThisInitialized(_this));_this.onMessage=_this.onMessage.bind(_assertThisInitialized(_this));_this.sendData=_this.sendData.bind(_assertThisInitialized(_this));_this.setupDataHandlers=_this.setupDataHandlers.bind(_assertThisInitialized(_this));_this.setDescription=_this.setDescription.bind(_assertThisInitialized(_this));_this.sendDescription=_this.sendDescription.bind(_assertThisInitialized(_this));_this.hangup=_this.hangup.bind(_assertThisInitialized(_this));_this.init=_this.init.bind(_assertThisInitialized(_this));_this.setDescription=_this.setDescription.bind(_assertThisInitialized(_this));return _this;}_createClass(MediaBridge,[{key:\"componentWillMount\",value:function componentWillMount(){// chrome polyfill for connection between the local device and a remote peer\nwindow.RTCPeerConnection=window.RTCPeerConnection||window.webkitRTCPeerConnection;this.props.media(this);}},{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;this.props.getUserMedia.then(function(stream){return _this2.localVideo.srcObject=_this2.localStream=stream;});this.props.socket.on('message',this.onMessage);this.props.socket.on('hangup',this.onRemoteHangup);}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){this.props.media(null);if(this.localStream!==undefined){this.localStream.getVideoTracks()[0].stop();}this.props.socket.emit('leave');}},{key:\"onRemoteHangup\",value:function onRemoteHangup(){this.setState({user:'host',bridge:'host-hangup'});}},{key:\"onMessage\",value:function onMessage(message){if(message.type==='offer'){// set remote description and answer\nthis.pc.setRemoteDescription(new RTCSessionDescription(message));this.pc.createAnswer().then(this.setDescription).then(this.sendDescription).catch(this.handleError);// An error occurred, so handle the failure to connect\n}else if(message.type==='answer'){// set remote description\nthis.pc.setRemoteDescription(new RTCSessionDescription(message));}else if(message.type==='candidate'){// add ice candidate\nthis.pc.addIceCandidate(new RTCIceCandidate({sdpMLineIndex:message.mlineindex,candidate:message.candidate}));}}},{key:\"sendData\",value:function sendData(msg){this.dc.send(JSON.stringify(msg));}// Set up the data channel message handler\n},{key:\"setupDataHandlers\",value:function setupDataHandlers(){var _this3=this;this.dc.onmessage=function(e){var msg=JSON.parse(e.data);console.log('received message over data channel:'+msg);};this.dc.onclose=function(){_this3.remoteStream.getVideoTracks()[0].stop();console.log('The Data Channel is Closed');};}},{key:\"setDescription\",value:function setDescription(offer){this.pc.setLocalDescription(offer);}// send the offer to a server to be forwarded to the other peer\n},{key:\"sendDescription\",value:function sendDescription(){this.props.socket.send(this.pc.localDescription);}},{key:\"hangup\",value:function hangup(){this.setState({user:'guest',bridge:'guest-hangup'});this.pc.close();this.props.socket.emit('leave');}},{key:\"handleError\",value:function handleError(e){console.log(e);}},{key:\"init\",value:function init(){var _this4=this;// wait for local media to be ready\nvar attachMediaIfReady=function attachMediaIfReady(){_this4.dc=_this4.pc.createDataChannel('chat');_this4.setupDataHandlers();console.log('attachMediaIfReady');_this4.pc.createOffer().then(_this4.setDescription).then(_this4.sendDescription).catch(_this4.handleError);// An error occurred, so handle the failure to connect\n};// set up the peer connection\n// this is one of Google's public STUN servers\n// make sure your offer/answer role does not change. If user A does a SLD\n// with type=offer initially, it must do that during  the whole session\nthis.pc=new RTCPeerConnection({iceServers:[{url:'stun:stun.l.google.com:19302'}]});// when our browser gets a candidate, send it to the peer\nthis.pc.onicecandidate=function(e){console.log(e,'onicecandidate');if(e.candidate){_this4.props.socket.send({type:'candidate',mlineindex:e.candidate.sdpMLineIndex,candidate:e.candidate.candidate});}};// when the other side added a media stream, show it on screen\nthis.pc.onaddstream=function(e){console.log('onaddstream',e);_this4.remoteStream=e.stream;_this4.remoteVideo.srcObject=_this4.remoteStream=e.stream;_this4.setState({bridge:'established'});};this.pc.ondatachannel=function(e){// data channel\n_this4.dc=e.channel;_this4.setupDataHandlers();_this4.sendData({peerMediaStream:{video:_this4.localStream.getVideoTracks()[0].enabled}});//sendData('hello');\n};// attach local media to the peer connection\nthis.localStream.getTracks().forEach(function(track){return _this4.pc.addTrack(track,_this4.localStream);});// call if we were the last to connect (to increase\n// chances that everything is set up properly at both ends)\nif(this.state.user==='host'){this.props.getUserMedia.then(attachMediaIfReady);}}},{key:\"render\",value:function render(){var _this5=this;return React.createElement(\"div\",{className:\"media-bridge \".concat(this.state.bridge)},React.createElement(\"video\",{className:\"remote-video\",ref:function ref(_ref){return _this5.remoteVideo=_ref;},autoPlay:true}),React.createElement(\"video\",{className:\"local-video\",ref:function ref(_ref2){return _this5.localVideo=_ref2;},autoPlay:true,muted:true}));}}]);return MediaBridge;}(Component);export default MediaBridge;","map":{"version":3,"sources":["/Users/seojin-won/wisdom-x-wisdom/client/src/containers/MediaContainer.js"],"names":["React","Component","MediaBridge","props","state","bridge","user","onRemoteHangup","bind","onMessage","sendData","setupDataHandlers","setDescription","sendDescription","hangup","init","window","RTCPeerConnection","webkitRTCPeerConnection","media","getUserMedia","then","stream","localVideo","srcObject","localStream","socket","on","undefined","getVideoTracks","stop","emit","setState","message","type","pc","setRemoteDescription","RTCSessionDescription","createAnswer","catch","handleError","addIceCandidate","RTCIceCandidate","sdpMLineIndex","mlineindex","candidate","msg","dc","send","JSON","stringify","onmessage","e","parse","data","console","log","onclose","remoteStream","offer","setLocalDescription","localDescription","close","attachMediaIfReady","createDataChannel","createOffer","iceServers","url","onicecandidate","onaddstream","remoteVideo","ondatachannel","channel","peerMediaStream","video","enabled","getTracks","forEach","track","addTrack","ref"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { PropTypes } from 'prop-types';\n\nclass MediaBridge extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      bridge: '',\n      user: ''\n    }\n    this.onRemoteHangup = this.onRemoteHangup.bind(this);\n    this.onMessage = this.onMessage.bind(this);\n    this.sendData = this.sendData.bind(this);\n    this.setupDataHandlers = this.setupDataHandlers.bind(this);\n    this.setDescription = this.setDescription.bind(this);\n    this.sendDescription = this.sendDescription.bind(this);\n    this.hangup = this.hangup.bind(this);\n    this.init = this.init.bind(this);\n    this.setDescription = this.setDescription.bind(this);\n  }\n  componentWillMount() {\n    // chrome polyfill for connection between the local device and a remote peer\n    window.RTCPeerConnection = window.RTCPeerConnection || window.webkitRTCPeerConnection;\n    this.props.media(this);\n  }\n  componentDidMount() {\n    this.props.getUserMedia\n      .then(stream => this.localVideo.srcObject = this.localStream = stream);\n    this.props.socket.on('message', this.onMessage);\n    this.props.socket.on('hangup', this.onRemoteHangup);\n  }\n  componentWillUnmount() {\n    this.props.media(null);\n    if (this.localStream !== undefined) {\n      this.localStream.getVideoTracks()[0].stop();\n    }\n    this.props.socket.emit('leave');\n  }\n  onRemoteHangup() {\n    this.setState({user: 'host', bridge: 'host-hangup'});\n  }\n  onMessage(message) {\n      if (message.type === 'offer') {\n          // set remote description and answer\n          this.pc.setRemoteDescription(new RTCSessionDescription(message));\n          this.pc.createAnswer()\n            .then(this.setDescription)\n            .then(this.sendDescription)\n            .catch(this.handleError); // An error occurred, so handle the failure to connect\n\n      } else if (message.type === 'answer') {\n          // set remote description\n          this.pc.setRemoteDescription(new RTCSessionDescription(message));\n      } else if (message.type === 'candidate') {\n          // add ice candidate\n          this.pc.addIceCandidate(\n              new RTCIceCandidate({\n                  sdpMLineIndex: message.mlineindex,\n                  candidate: message.candidate\n              })\n          );\n      }\n  }\n  sendData(msg) {\n    this.dc.send(JSON.stringify(msg))\n  }\n  // Set up the data channel message handler\n  setupDataHandlers() {\n      this.dc.onmessage = e => {\n          var msg = JSON.parse(e.data);\n          console.log('received message over data channel:' + msg);\n      };\n      this.dc.onclose = () => {\n        this.remoteStream.getVideoTracks()[0].stop();\n        console.log('The Data Channel is Closed');\n      };\n  }\n  setDescription(offer) {\n    this.pc.setLocalDescription(offer);\n  }\n  // send the offer to a server to be forwarded to the other peer\n  sendDescription() {\n    this.props.socket.send(this.pc.localDescription);\n  }\n  hangup() {\n    this.setState({user: 'guest', bridge: 'guest-hangup'});\n    this.pc.close();\n    this.props.socket.emit('leave');\n  }\n  handleError(e) {\n    console.log(e);\n  }\n  init() {\n    // wait for local media to be ready\n    const attachMediaIfReady = () => {\n      this.dc = this.pc.createDataChannel('chat');\n      this.setupDataHandlers();\n      console.log('attachMediaIfReady')\n      this.pc.createOffer()\n        .then(this.setDescription)\n        .then(this.sendDescription)\n        .catch(this.handleError); // An error occurred, so handle the failure to connect\n    }\n    // set up the peer connection\n    // this is one of Google's public STUN servers\n    // make sure your offer/answer role does not change. If user A does a SLD\n    // with type=offer initially, it must do that during  the whole session\n    this.pc = new RTCPeerConnection({iceServers: [{url: 'stun:stun.l.google.com:19302'}]});\n    // when our browser gets a candidate, send it to the peer\n    this.pc.onicecandidate = e => {\n        console.log(e, 'onicecandidate');\n        if (e.candidate) {\n            this.props.socket.send({\n                type: 'candidate',\n                mlineindex: e.candidate.sdpMLineIndex,\n                candidate: e.candidate.candidate\n            });\n        }\n    };\n    // when the other side added a media stream, show it on screen\n    this.pc.onaddstream = e => {\n        console.log('onaddstream', e) \n        this.remoteStream = e.stream;\n        this.remoteVideo.srcObject = this.remoteStream = e.stream;\n        this.setState({bridge: 'established'});\n    };\n    this.pc.ondatachannel = e => {\n        // data channel\n        this.dc = e.channel;\n        this.setupDataHandlers();\n        this.sendData({\n          peerMediaStream: {\n            video: this.localStream.getVideoTracks()[0].enabled\n          }\n        });\n        //sendData('hello');\n    };\n    // attach local media to the peer connection\n    this.localStream.getTracks().forEach(track => this.pc.addTrack(track, this.localStream));\n    // call if we were the last to connect (to increase\n    // chances that everything is set up properly at both ends)\n    if (this.state.user === 'host') {\n      this.props.getUserMedia.then(attachMediaIfReady);\n    }  \n  }\n  render(){\n    return (\n      <div className={`media-bridge ${this.state.bridge}`}>\n        <video className=\"remote-video\" ref={(ref) => this.remoteVideo = ref} autoPlay></video>\n        <video className=\"local-video\" ref={(ref) => this.localVideo = ref} autoPlay muted></video>\n      </div>\n    );\n  }\n}\nMediaBridge.propTypes = {\n  socket: PropTypes.object.isRequired,\n  getUserMedia: PropTypes.object.isRequired,\n  media: PropTypes.func.isRequired\n}\nexport default MediaBridge;"]},"metadata":{},"sourceType":"module"}