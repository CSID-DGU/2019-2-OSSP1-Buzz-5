{"ast":null,"code":"var _jsxFileName = \"/Users/seojin-won/wisdom-x-wisdom/client/src/containers/MediaContainer.js\";\nimport React, { Component } from 'react';\nimport { PropTypes } from 'prop-types';\n\nclass MediaBridge extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onShare = () => {\n      if (navigator.mediaDevices.getDisplayMedia) {\n        navigator.mediaDevices.getDisplayMedia({\n          video: true,\n          audio: true\n        }).then(stream => {\n          let screenTrack = stream.getVideoTracks()[0];\n          var sender = this.pc.getSenders().find(function (s) {\n            return s.track.kind == screenTrack.kind;\n          });\n          this.localStream = this.localVideo.srcObject = stream;\n          sender.replaceTrack(screenTrack);\n\n          stream.oninactive = () => {\n            this.props.getUserMedia.then(stream => {\n              const camTrack = stream.getVideoTracks()[0];\n              const sender = this.pc.getSenders().find(function (s) {\n                return s.track.kind == camTrack.kind;\n              });\n              this.localStream = this.localVideo.srcObject = stream;\n              sender.replaceTrack(camTrack);\n            });\n          };\n        });\n      }\n    };\n\n    this.offShare = () => {};\n\n    this.state = {\n      bridge: '',\n      user: ''\n    };\n    this.onRemoteHangup = this.onRemoteHangup.bind(this);\n    this.onMessage = this.onMessage.bind(this);\n    this.sendData = this.sendData.bind(this);\n    this.setupDataHandlers = this.setupDataHandlers.bind(this);\n    this.setDescription = this.setDescription.bind(this);\n    this.sendDescription = this.sendDescription.bind(this);\n    this.hangup = this.hangup.bind(this);\n    this.init = this.init.bind(this);\n    this.setDescription = this.setDescription.bind(this);\n    this.onShare = this.onShare.bind(this);\n    this.offShare = this.offShare.bind(this);\n  }\n\n  componentWillMount() {\n    // chrome polyfill for connection between the local device and a remote peer\n    window.RTCPeerConnection = window.RTCPeerConnection || window.webkitRTCPeerConnection;\n    this.props.media(this);\n  }\n\n  componentDidMount() {\n    this.props.getUserMedia.then(stream => this.localVideo.srcObject = this.localStream = stream);\n    this.props.socket.on('message', this.onMessage);\n    this.props.socket.on('hangup', this.onRemoteHangup);\n  }\n\n  componentWillUnmount() {\n    this.props.media(null);\n\n    if (this.localStream !== undefined) {\n      this.localStream.getVideoTracks()[0].stop();\n    }\n\n    this.props.socket.emit('leave');\n  }\n\n  onRemoteHangup() {\n    this.setState({\n      user: 'host',\n      bridge: 'host-hangup'\n    });\n  }\n\n  onMessage(message) {\n    if (message.type === 'offer') {\n      // set remote description and answer\n      this.pc.setRemoteDescription(new RTCSessionDescription(message));\n      this.pc.createAnswer().then(this.setDescription).then(this.sendDescription).catch(this.handleError); // An error occurred, so handle the failure to connect\n    } else if (message.type === 'answer') {\n      // set remote description\n      this.pc.setRemoteDescription(new RTCSessionDescription(message));\n    } else if (message.type === 'candidate') {\n      // add ice candidate\n      this.pc.addIceCandidate(new RTCIceCandidate({\n        sdpMLineIndex: message.mlineindex,\n        candidate: message.candidate\n      }));\n    }\n  }\n\n  sendData(msg) {\n    this.dc.send(JSON.stringify(msg));\n  } // Set up the data channel message handler\n\n\n  setupDataHandlers() {\n    this.dc.onmessage = e => {\n      var msg = JSON.parse(e.data);\n      console.log('received message over data channel:' + msg);\n    };\n\n    this.dc.onclose = () => {\n      this.remoteStream.getVideoTracks()[0].stop();\n      console.log('The Data Channel is Closed');\n    };\n  }\n\n  setDescription(offer) {\n    this.pc.setLocalDescription(offer);\n  } // send the offer to a server to be forwarded to the other peer\n\n\n  sendDescription() {\n    this.props.socket.send(this.pc.localDescription);\n  }\n\n  hangup() {\n    this.setState({\n      user: 'guest',\n      bridge: 'guest-hangup'\n    });\n    this.pc.close();\n    this.props.socket.emit('leave');\n  }\n\n  handleError(e) {\n    console.log(e);\n  }\n\n  init() {\n    // wait for local media to be ready\n    const attachMediaIfReady = () => {\n      this.dc = this.pc.createDataChannel('chat');\n      this.setupDataHandlers();\n      console.log('attachMediaIfReady');\n      this.pc.createOffer().then(this.setDescription).then(this.sendDescription).catch(this.handleError); // An error occurred, so handle the failure to connect\n    }; // set up the peer connection\n    // this is one of Google's public STUN servers\n    // make sure your offer/answer role does not change. If user A does a SLD\n    // with type=offer initially, it must do that during  the whole session\n\n\n    this.pc = new RTCPeerConnection({\n      iceServers: [{\n        url: 'stun:stun.l.google.com:19302'\n      }]\n    }); // when our browser gets a candidate, send it to the peer\n\n    this.pc.onicecandidate = e => {\n      console.log(e, 'onicecandidate');\n\n      if (e.candidate) {\n        this.props.socket.send({\n          type: 'candidate',\n          mlineindex: e.candidate.sdpMLineIndex,\n          candidate: e.candidate.candidate\n        });\n      }\n    }; // when the other side added a media stream, show it on screen\n\n\n    this.pc.onaddstream = e => {\n      console.log('onaddstream', e);\n      this.remoteStream = e.stream;\n      this.remoteVideo.srcObject = this.remoteStream = e.stream;\n      this.setState({\n        bridge: 'established'\n      });\n    };\n\n    this.pc.ondatachannel = e => {\n      // data channel\n      this.dc = e.channel;\n      this.setupDataHandlers();\n      this.sendData({\n        peerMediaStream: {\n          video: this.localStream.getVideoTracks()[0].enabled\n        }\n      }); //sendData('hello');\n    }; // attach local media to the peer connection\n\n\n    this.localStream.getTracks().forEach(track => this.pc.addTrack(track, this.localStream)); // call if we were the last to connect (to increase\n    // chances that everything is set up properly at both ends)\n\n    if (this.state.user === 'host') {\n      this.props.getUserMedia.then(attachMediaIfReady);\n    }\n  }\n\n  render() {\n    return (// <div className=\"container\">\n      //   <div className=\"row\">\n      //     <div className=\"col-md-9\">\n      React.createElement(\"div\", {\n        className: \"media-bridge \".concat(this.state.bridge),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, React.createElement(\"video\", {\n        className: \"remote-video\",\n        ref: ref => this.remoteVideo = ref,\n        autoPlay: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }), React.createElement(\"video\", {\n        className: \"local-video\",\n        ref: ref => this.localVideo = ref,\n        autoPlay: true,\n        muted: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      })) //     </div>\n      //     <div className=\"col-md-3\">\n      //       asdfasdf\n      //     </div>\n      //   </div>\n      // </div>\n\n    );\n  }\n\n}\n\nMediaBridge.propTypes = {\n  socket: PropTypes.object.isRequired,\n  getUserMedia: PropTypes.object.isRequired,\n  media: PropTypes.func.isRequired\n};\nexport default MediaBridge;","map":{"version":3,"sources":["/Users/seojin-won/wisdom-x-wisdom/client/src/containers/MediaContainer.js"],"names":["React","Component","PropTypes","MediaBridge","constructor","props","onShare","navigator","mediaDevices","getDisplayMedia","video","audio","then","stream","screenTrack","getVideoTracks","sender","pc","getSenders","find","s","track","kind","localStream","localVideo","srcObject","replaceTrack","oninactive","getUserMedia","camTrack","offShare","state","bridge","user","onRemoteHangup","bind","onMessage","sendData","setupDataHandlers","setDescription","sendDescription","hangup","init","componentWillMount","window","RTCPeerConnection","webkitRTCPeerConnection","media","componentDidMount","socket","on","componentWillUnmount","undefined","stop","emit","setState","message","type","setRemoteDescription","RTCSessionDescription","createAnswer","catch","handleError","addIceCandidate","RTCIceCandidate","sdpMLineIndex","mlineindex","candidate","msg","dc","send","JSON","stringify","onmessage","e","parse","data","console","log","onclose","remoteStream","offer","setLocalDescription","localDescription","close","attachMediaIfReady","createDataChannel","createOffer","iceServers","url","onicecandidate","onaddstream","remoteVideo","ondatachannel","channel","peerMediaStream","enabled","getTracks","forEach","addTrack","render","ref","propTypes","object","isRequired","func"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { PropTypes } from 'prop-types';\n\nclass MediaBridge extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      bridge: '',\n      user: ''\n    }\n    this.onRemoteHangup = this.onRemoteHangup.bind(this);\n    this.onMessage = this.onMessage.bind(this);\n    this.sendData = this.sendData.bind(this);\n    this.setupDataHandlers = this.setupDataHandlers.bind(this);\n    this.setDescription = this.setDescription.bind(this);\n    this.sendDescription = this.sendDescription.bind(this);\n    this.hangup = this.hangup.bind(this);\n    this.init = this.init.bind(this);\n    this.setDescription = this.setDescription.bind(this);\n    this.onShare = this.onShare.bind(this);\n    this.offShare = this.offShare.bind(this);\n  }\n  componentWillMount() {\n    // chrome polyfill for connection between the local device and a remote peer\n    window.RTCPeerConnection = window.RTCPeerConnection || window.webkitRTCPeerConnection;\n    this.props.media(this);\n  }\n  componentDidMount() {\n    this.props.getUserMedia\n      .then(stream => this.localVideo.srcObject = this.localStream = stream);\n    this.props.socket.on('message', this.onMessage);\n    this.props.socket.on('hangup', this.onRemoteHangup);\n  }\n  componentWillUnmount() {\n    this.props.media(null);\n    if (this.localStream !== undefined) {\n      this.localStream.getVideoTracks()[0].stop();\n    }\n    this.props.socket.emit('leave');\n  }\n  onRemoteHangup() {\n    this.setState({user: 'host', bridge: 'host-hangup'});\n  }\n  onMessage(message) {\n      if (message.type === 'offer') {\n          // set remote description and answer\n          this.pc.setRemoteDescription(new RTCSessionDescription(message));\n          this.pc.createAnswer()\n            .then(this.setDescription)\n            .then(this.sendDescription)\n            .catch(this.handleError); // An error occurred, so handle the failure to connect\n\n      } else if (message.type === 'answer') {\n          // set remote description\n          this.pc.setRemoteDescription(new RTCSessionDescription(message));\n      } else if (message.type === 'candidate') {\n          // add ice candidate\n          this.pc.addIceCandidate(\n              new RTCIceCandidate({\n                  sdpMLineIndex: message.mlineindex,\n                  candidate: message.candidate\n              })\n          );\n      }\n  }\n  sendData(msg) {\n    this.dc.send(JSON.stringify(msg))\n  }\n  // Set up the data channel message handler\n  setupDataHandlers() {\n      this.dc.onmessage = e => {\n          var msg = JSON.parse(e.data);\n          console.log('received message over data channel:' + msg);\n      };\n      this.dc.onclose = () => {\n        this.remoteStream.getVideoTracks()[0].stop();\n        console.log('The Data Channel is Closed');\n      };\n  }\n  setDescription(offer) {\n    this.pc.setLocalDescription(offer);\n  }\n  // send the offer to a server to be forwarded to the other peer\n  sendDescription() {\n    this.props.socket.send(this.pc.localDescription);\n  }\n  hangup() {\n    this.setState({user: 'guest', bridge: 'guest-hangup'});\n    this.pc.close();\n    this.props.socket.emit('leave');\n  }\n  handleError(e) {\n    console.log(e);\n  }\n  \n  onShare = () => {\n    if(navigator.mediaDevices.getDisplayMedia) {\n      navigator.mediaDevices.getDisplayMedia({video:true, audio:true}).then(stream => {\n        let screenTrack = stream.getVideoTracks()[0];\n        var sender = this.pc.getSenders().find(function(s) {\n          return s.track.kind == screenTrack.kind;\n        })\n        this.localStream = this.localVideo.srcObject = stream;\n        sender.replaceTrack(screenTrack)\n        \n        stream.oninactive = () => {\n          this.props.getUserMedia.then(stream => {\n            const camTrack = stream.getVideoTracks()[0];\n            const sender = this.pc.getSenders().find(function(s) {\n              return s.track.kind == camTrack.kind;\n            })\n            this.localStream = this.localVideo.srcObject = stream;\n            sender.replaceTrack(camTrack);\n          });\n        }\n      })\n    }\n  }\n\n  offShare = () => {\n    \n    \n  }\n\n\n  init() {\n    // wait for local media to be ready\n    const attachMediaIfReady = () => {\n      this.dc = this.pc.createDataChannel('chat');\n      this.setupDataHandlers();\n      console.log('attachMediaIfReady')\n      this.pc.createOffer()\n        .then(this.setDescription)\n        .then(this.sendDescription)\n        .catch(this.handleError); // An error occurred, so handle the failure to connect\n    }\n    // set up the peer connection\n    // this is one of Google's public STUN servers\n    // make sure your offer/answer role does not change. If user A does a SLD\n    // with type=offer initially, it must do that during  the whole session\n    this.pc = new RTCPeerConnection({iceServers: [{url: 'stun:stun.l.google.com:19302'}]});\n    // when our browser gets a candidate, send it to the peer\n    this.pc.onicecandidate = e => {\n        console.log(e, 'onicecandidate');\n        if (e.candidate) {\n            this.props.socket.send({\n                type: 'candidate',\n                mlineindex: e.candidate.sdpMLineIndex,\n                candidate: e.candidate.candidate\n            });\n        }\n    };\n    // when the other side added a media stream, show it on screen\n    this.pc.onaddstream = e => {\n        console.log('onaddstream', e) \n        this.remoteStream = e.stream;\n        this.remoteVideo.srcObject = this.remoteStream = e.stream;\n        this.setState({bridge: 'established'});\n    };\n    this.pc.ondatachannel = e => {\n        // data channel\n        this.dc = e.channel;\n        this.setupDataHandlers();\n        this.sendData({\n          peerMediaStream: {\n            video: this.localStream.getVideoTracks()[0].enabled\n          }\n        });\n        //sendData('hello');\n    };\n    // attach local media to the peer connection\n    this.localStream.getTracks().forEach(track => this.pc.addTrack(track, this.localStream));\n    // call if we were the last to connect (to increase\n    // chances that everything is set up properly at both ends)\n    if (this.state.user === 'host') {\n      this.props.getUserMedia.then(attachMediaIfReady);\n    }  \n  }\n  render(){\n    return (\n      // <div className=\"container\">\n      //   <div className=\"row\">\n      //     <div className=\"col-md-9\">\n            <div className={`media-bridge ${this.state.bridge}`}>\n              <video className=\"remote-video\" ref={(ref) => this.remoteVideo = ref} autoPlay></video>\n              <video className=\"local-video\" ref={(ref) => this.localVideo = ref} autoPlay muted></video>\n            </div>\n      //     </div>\n      //     <div className=\"col-md-3\">\n      //       asdfasdf\n      //     </div>\n      //   </div>\n      // </div>\n    );\n  }\n}\nMediaBridge.propTypes = {\n  socket: PropTypes.object.isRequired,\n  getUserMedia: PropTypes.object.isRequired,\n  media: PropTypes.func.isRequired\n}\nexport default MediaBridge;\n"]},"metadata":{},"sourceType":"module"}